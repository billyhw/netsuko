% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netzuko.R
\name{predict_netzuko}
\alias{predict_netzuko}
\title{Make Predictions on a test set}
\usage{
predict_netzuko(nn_fit, x_test, type = c("prob", "class"))
}
\arguments{
\item{nn_fit}{A fitted neural network object from netzuko}

\item{type}{The output type. When type = "prob" (default) the output is a matrix of class
probabilities. When type = "class", the output is the class with the highest predictive probability}

\item{x}{The test inputs}
}
\value{
A matrix of output probabilities
}
\description{
Make Predictions on a test set
}
\note{
This function is essentially the forward pass of a neural network.
}
\examples{
set.seed(8)
logistic = function(alpha, beta, x) 1/(1 + exp(-(alpha + beta*x)))
x_train = matrix(rnorm(300), 100, 3)
y_train = factor(rbinom(100, 1, prob = logistic(alpha = 0, beta = 1, x_train[,1])) +
                  rbinom(100, 1, prob = logistic(alpha = 0, beta = 1, x_train[,2])))
x_test = matrix(rnorm(3000), 1000, 3)
y_test = factor(rbinom(1000, 1, prob = logistic(alpha = 0, beta = 1, x_test[,1])) +
                 rbinom(1000, 1, prob = logistic(alpha = 0, beta = 1, x_test[,2])))
fit = netzuko(x_train, y_train, x_test, y_test, num_hidden = c(3, 3), step_size = 0.01, iter = 100)
pred = predict_netzuko(fit, x_test)
fit$cost_test[100]
netzuko::cross_entropy(pred, model.matrix(~ y_test - 1))
fit_2 = netzuko(mnist$x_train[1:100,], mnist$y_train[1:100], x_test, y_test, num_hidden = c(3, 3), step_size = 0.01, iter = 100)
pred_2 = predict_netzuko(fit, x_test, type = "class")
head(pred_2)
}
